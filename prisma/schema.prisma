generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Admin {
  id       String @id
  username String @unique
}

model Student {
  id          String       @id
  username    String       @unique
  name        String
  surname     String
  address     String
  img         String?
  bloodType   String
  sex         UserSex
  createdAt   DateTime     @default(now())
  parentId    String?
  classId     Int
  gradeId     Int
  birthday    DateTime
  attendances Attendance[]
  results     Result[]
  class       Class        @relation(fields: [classId], references: [id])
  grade       Grade        @relation(fields: [gradeId], references: [id])
  parent      Parent?      @relation(fields: [parentId], references: [id])
  studentFees StudentFee[]
}

model Teacher {
  id            String         @id
  username      String         @unique
  name          String
  surname       String
  email         String?        @unique
  phone         String?        @unique
  address       String
  img           String?
  bloodType     String
  sex           UserSex
  createdAt     DateTime       @default(now())
  birthday      DateTime
  announcements Announcement[]
  assignments   Assignment[]   @relation("TeacherToAssignment")
  classes       Class[]
  lessons       Lesson[]
  subjects      Subject[]      @relation("SubjectToTeacher")
}

model Parent {
  id        String    @id
  username  String    @unique
  name      String
  surname   String
  email     String?   @unique
  phone     String    @unique
  address   String
  createdAt DateTime  @default(now())
  img       String?
  students  Student[]
}

model Grade {
  id       Int       @id @default(autoincrement())
  level    Int       @unique
  name     String    @unique
  classess Class[]
  students Student[]
}

model Class {
  id            Int            @id @default(autoincrement())
  name          String         @unique
  capacity      Int
  supervisorId  String?
  gradeId       Int
  announcements Announcement[]
  assignments   Assignment[]
  attendances   Attendance[]
  grade         Grade          @relation(fields: [gradeId], references: [id])
  supervisor    Teacher?       @relation(fields: [supervisorId], references: [id])
  classFees     ClassFee[]
  events        Event[]
  exams         Exam[]
  lessons       Lesson[]
  students      Student[]
}

model Subject {
  id          Int          @id @default(autoincrement())
  name        String       @unique
  assignments Assignment[]
  exams       Exam[]
  lessons     Lesson[]
  teachers    Teacher[]    @relation("SubjectToTeacher")
}

model Lesson {
  id        Int      @id @default(autoincrement())
  name      String
  day       Day
  startTime DateTime
  endTime   DateTime
  subjectId Int
  classId   Int
  teacherId String
  class     Class    @relation(fields: [classId], references: [id])
  subject   Subject  @relation(fields: [subjectId], references: [id])
  teacher   Teacher  @relation(fields: [teacherId], references: [id])
}

model Exam {
  id        Int      @id @default(autoincrement())
  title     String
  startTime DateTime
  endTime   DateTime
  term      Term     @default(FIRST)
  classId   Int?
  subjectId Int?
  class     Class?   @relation(fields: [classId], references: [id])
  subject   Subject? @relation(fields: [subjectId], references: [id])
  results   Result[]
}

model Assignment {
  id          Int      @id @default(autoincrement())
  title       String
  startDate   DateTime @default(now())
  dueDate     DateTime
  classId     Int
  description String
  maxPoints   Int      @default(0)
  subjectId   Int
  teacherId   String
  class       Class    @relation(fields: [classId], references: [id])
  subject     Subject  @relation(fields: [subjectId], references: [id])
  teacher     Teacher  @relation("TeacherToAssignment", fields: [teacherId], references: [id])
  results     Result[]
}

model Result {
  id           Int         @id @default(autoincrement())
  score        Int
  examId       Int?
  assignmentId Int?
  studentId    String
  feedback     String?
  assignment   Assignment? @relation(fields: [assignmentId], references: [id])
  exam         Exam?       @relation(fields: [examId], references: [id])
  student      Student     @relation(fields: [studentId], references: [id])
}

model Attendance {
  id        Int      @id @default(autoincrement())
  date      DateTime
  present   Boolean
  studentId String
  classId   Int
  class     Class    @relation(fields: [classId], references: [id])
  student   Student  @relation(fields: [studentId], references: [id])

  @@unique([studentId, date, classId], map: "unique_student_date_attendance")
}

model Event {
  id          Int      @id @default(autoincrement())
  title       String
  description String
  startTime   DateTime
  endTime     DateTime
  classId     Int?
  class       Class?   @relation(fields: [classId], references: [id])
}

model Announcement {
  id          Int      @id @default(autoincrement())
  title       String
  description String
  date        DateTime
  classId     Int?
  priority    Priority @default(MEDIUM)
  teacherId   String?
  class       Class?   @relation(fields: [classId], references: [id])
  teacher     Teacher? @relation(fields: [teacherId], references: [id])
}

model FeeType {
  id          Int        @id @default(autoincrement())
  name        String     @unique
  description String?
  classFees   ClassFee[]
}

model ClassFee {
  id          Int          @id @default(autoincrement())
  amount      Float
  dueDate     DateTime
  classId     Int
  feeTypeId   Int
  class       Class        @relation(fields: [classId], references: [id])
  feeType     FeeType      @relation(fields: [feeTypeId], references: [id])
  studentFees StudentFee[]
}

model StudentFee {
  id         Int           @id @default(autoincrement())
  amount     Float
  paidDate   DateTime      @default(now())
  studentId  String
  classFeeId Int
  reminders  FeeReminder[]
  classFee   ClassFee      @relation(fields: [classFeeId], references: [id])
  student    Student       @relation(fields: [studentId], references: [id])
}

model FeeReminder {
  id           Int          @id @default(autoincrement())
  studentFeeId Int
  type         ReminderType
  sentDate     DateTime     @default(now())
  successful   Boolean      @default(true)
  error        String?
  studentFee   StudentFee   @relation(fields: [studentFeeId], references: [id])
}

enum UserSex {
  MALE
  FEMALE
}

enum Priority {
  LOW
  MEDIUM
  HIGH
  URGENT
}

enum PaymentStatus {
  PENDING
  PAID
  OVERDUE
}

enum ReminderType {
  UPCOMING
  OVERDUE
}

enum Day {
  MONDAY
  TUESDAY
  WEDNESDAY
  THURSDAY
  FRIDAY
}

enum Term {
  FIRST
  SECOND
  THIRD
  FINAL
}
